// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jzon from "rescript-jzon/src/Jzon.mjs";
import * as Uuid from "uuid";
import * as Store from "./Store.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_MapString from "rescript/lib/es6/belt_MapString.js";

function helloWorld(param) {
  var result = {};
  result["Hello"] = "World";
  return result;
}

var addRecipeInputCodec = Jzon.object3((function (param) {
        return [
                param.title,
                param.ingredients,
                param.instructions
              ];
      }), (function (param) {
        return {
                TAG: /* Ok */0,
                _0: {
                  title: param[0],
                  ingredients: param[1],
                  instructions: param[2]
                }
              };
      }), Jzon.field("title", Jzon.string), Jzon.field("ingredients", Jzon.string), Jzon.field("instructions", Jzon.string));

function addRecipe(body) {
  var jsonFields = Belt_Option.map(Belt_Option.flatMap(body, Js_json.decodeObject), (function (jsonBody) {
          return [
                  Belt_Option.flatMap(Js_dict.get(jsonBody, "title"), Js_json.decodeString),
                  Belt_Option.flatMap(Js_dict.get(jsonBody, "ingredients"), Js_json.decodeString),
                  Belt_Option.flatMap(Js_dict.get(jsonBody, "instructions"), Js_json.decodeString)
                ];
        }));
  var jsonResponse = {};
  var exit = 0;
  if (jsonFields !== undefined) {
    var title = jsonFields[0];
    if (title !== undefined) {
      var ingredients = jsonFields[1];
      if (ingredients !== undefined) {
        var instructions = jsonFields[2];
        if (instructions !== undefined) {
          var id = Uuid.v4();
          Store.Reducer.dispatch({
                TAG: /* AddRecipe */0,
                id: id,
                title: title,
                ingredients: ingredients,
                instructions: instructions
              });
          jsonResponse["id"] = id;
        } else {
          exit = 1;
        }
      } else {
        exit = 1;
      }
    } else {
      exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    jsonResponse["error"] = "missing attribute";
  }
  return jsonResponse;
}

function addTagToRecipe(body) {
  var jsonResponse = {};
  var jsonFields = Belt_Option.map(Belt_Option.flatMap(body, Js_json.decodeObject), (function (jsonBody) {
          return [
                  Belt_Option.flatMap(Belt_Option.flatMap(Js_dict.get(jsonBody, "recipeId"), Js_json.decodeString), (function (id) {
                          return Belt_MapString.get(Store.Reducer.getState(undefined).recipes, id);
                        })),
                  Belt_Option.flatMap(Js_dict.get(jsonBody, "tag"), Js_json.decodeString)
                ];
        }));
  var exit = 0;
  if (jsonFields !== undefined) {
    var recipe = jsonFields[0];
    if (recipe !== undefined) {
      var tag = jsonFields[1];
      if (tag !== undefined) {
        jsonResponse["success"] = true;
        Store.Reducer.dispatch({
              TAG: /* AddTag */1,
              recipeId: recipe.id,
              tag: tag
            });
      } else {
        exit = 1;
      }
    } else {
      exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    jsonResponse["error"] = "invalid request";
  }
  return jsonResponse;
}

function getRecipe(params) {
  var jsonResponse = {};
  var state = Store.Reducer.getState(undefined);
  var recipeOption = Belt_Option.flatMap(Belt_Option.flatMap(Js_dict.get(params, "id"), Js_json.decodeString), (function (id) {
          return Belt_MapString.get(state.recipes, id);
        }));
  if (recipeOption !== undefined) {
    jsonResponse["id"] = recipeOption.id;
    jsonResponse["title"] = recipeOption.title;
    jsonResponse["ingredients"] = recipeOption.ingredients;
    jsonResponse["instructions"] = recipeOption.instructions;
    jsonResponse["tags"] = recipeOption.tags;
  } else {
    jsonResponse["error"] = "unable to find that recipe";
  }
  return jsonResponse;
}

function getTag(params) {
  var jsonResponse = {};
  var state = Store.Reducer.getState(undefined);
  var taggedRecipesOption = Belt_Option.flatMap(Belt_Option.flatMap(Js_dict.get(params, "tag"), Js_json.decodeString), (function (tag) {
          return Belt_MapString.get(state.tags, tag);
        }));
  if (taggedRecipesOption !== undefined) {
    var recipes = Belt_Array.map(Belt_Array.keep(Belt_Array.map(taggedRecipesOption.recipes, (function (id) {
                    return Belt_Option.map(Belt_MapString.get(state.recipes, id), (function (recipe) {
                                  var dict = {};
                                  dict["id"] = id;
                                  dict["title"] = recipe.title;
                                  return dict;
                                }));
                  })), Belt_Option.isSome), (function (opt) {
            return opt;
          }));
    jsonResponse["recipes"] = recipes;
  } else {
    jsonResponse["error"] = "tag not found";
  }
  return jsonResponse;
}

export {
  helloWorld ,
  addRecipeInputCodec ,
  addRecipe ,
  addTagToRecipe ,
  getRecipe ,
  getTag ,
  
}
/* addRecipeInputCodec Not a pure module */
