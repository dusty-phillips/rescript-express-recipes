// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Store from "./Store.mjs";
import * as Schema from "./Schema.mjs";
import * as Express from "bs-express/src/Express.mjs";
import * as Resolvers from "./Resolvers.mjs";
import * as Controller from "./Controller.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Belt_MapString from "rescript/lib/es6/belt_MapString.js";
import * as ExpressGraphql from "express-graphql";

var app = Express.express(undefined);

Express.App.use(app, Express.Middleware.json(undefined, undefined, undefined, undefined));

Express.App.useOnPath(app, "/graphql", ExpressGraphql.graphqlHTTP({
          schema: Schema.schema,
          graphiql: true,
          rootValue: Resolvers.rootValue
        }));

Express.App.get(app, "/", Express.Middleware.from(function (param, param$1, res) {
          var json = Controller.helloWorld(undefined);
          return Express.$$Response.status(res, /* Ok */0).json(json);
        }));

Express.App.post(app, "/addRecipe", Express.Middleware.from(function (_next, req, res) {
          var jsonResponse = Controller.addRecipe(Caml_option.nullable_to_opt(req.body));
          return res.json(jsonResponse);
        }));

Express.App.post(app, "/addTagToRecipe", Express.Middleware.from(function (_next, req, res) {
          var jsonResponse = Controller.addTagToRecipe(Caml_option.nullable_to_opt(req.body));
          return res.json(jsonResponse);
        }));

Express.App.get(app, "/recipes/:id", Express.Middleware.from(function (_next, req, res) {
          var jsonResponse = Controller.getRecipe(req.params);
          return res.json(jsonResponse);
        }));

Express.App.get(app, "/allTags", Express.Middleware.from(function (_next, _req, res) {
          var jsonResponse = {};
          jsonResponse["tags"] = Belt_MapString.keysToArray(Store.Reducer.getState(undefined).tags);
          return res.json(jsonResponse);
        }));

Express.App.get(app, "/tags/:tag", Express.Middleware.from(function (_next, req, res) {
          var jsonResponse = Controller.getTag(req.params);
          return res.json(jsonResponse);
        }));

var server = Express.App.listen(app, 3001, undefined, (function (param) {
        console.log("Example app listening at http://localhost:" + (3001).toString());
        
      }), undefined);

var port = 3001;

export {
  app ,
  port ,
  server ,
  
}
/* app Not a pure module */
