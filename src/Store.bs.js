// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_MapString from "rescript/lib/es6/belt_MapString.js";

var initialState = {
  recipes: undefined,
  tags: undefined
};

function addRecipe(state, id, title, ingredients, instructions) {
  return {
          recipes: Belt_MapString.set(state.recipes, id, {
                id: id,
                title: title,
                ingredients: ingredients,
                instructions: instructions,
                tags: [],
                updatedAt: Date.now(),
                deleted: false
              }),
          tags: state.tags
        };
}

function createOrUpdateTaggedRecipes(taggedRecipesOption, tag, recipeId) {
  if (taggedRecipesOption !== undefined) {
    return {
            tag: taggedRecipesOption.tag,
            recipes: Belt_Array.concat(taggedRecipesOption.recipes, [recipeId]),
            updatedAt: Date.now(),
            deleted: taggedRecipesOption.deleted
          };
  } else {
    return {
            tag: tag,
            recipes: [recipeId],
            updatedAt: Date.now(),
            deleted: false
          };
  }
}

function addTag(state, recipeId, tag) {
  var recipeOption = Belt_MapString.get(state.recipes, recipeId);
  if (recipeOption === undefined) {
    return state;
  }
  var recipeTags = Belt_Array.concat(recipeOption.tags, [tag]);
  var recipes = Belt_MapString.set(state.recipes, recipeOption.id, {
        id: recipeOption.id,
        title: recipeOption.title,
        ingredients: recipeOption.ingredients,
        instructions: recipeOption.instructions,
        tags: recipeTags,
        updatedAt: recipeOption.updatedAt,
        deleted: recipeOption.deleted
      });
  var tags = Belt_MapString.update(state.tags, tag, (function (taggedRecipesOption) {
          return createOrUpdateTaggedRecipes(taggedRecipesOption, tag, recipeOption.id);
        }));
  return {
          recipes: recipes,
          tags: tags
        };
}

function setRecipe(state, recipe) {
  return {
          recipes: Belt_MapString.set(state.recipes, recipe.id, recipe),
          tags: state.tags
        };
}

function setTaggedRecipes(state, taggedRecipes) {
  return {
          recipes: state.recipes,
          tags: Belt_MapString.set(state.tags, taggedRecipes.tag, taggedRecipes)
        };
}

function reducer(state, action) {
  switch (action.TAG | 0) {
    case /* AddRecipe */0 :
        return addRecipe(state, action.id, action.title, action.ingredients, action.instructions);
    case /* AddTag */1 :
        return addTag(state, action.recipeId, action.tag);
    case /* SetRecipe */2 :
        return setRecipe(state, action._0);
    case /* SetTaggedRecipes */3 :
        return setTaggedRecipes(state, action._0);
    
  }
}

var currentState = {
  contents: initialState
};

function getState(param) {
  return currentState.contents;
}

function dispatch(action) {
  currentState.contents = reducer(currentState.contents, action);
  
}

function dangerousResetState(param) {
  currentState.contents = initialState;
  
}

var Reducer = {
  getState: getState,
  dispatch: dispatch,
  dangerousResetState: dangerousResetState
};

export {
  initialState ,
  addRecipe ,
  createOrUpdateTaggedRecipes ,
  addTag ,
  setRecipe ,
  setTaggedRecipes ,
  reducer ,
  Reducer ,
  
}
/* No side effect */
