// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Zora from "@dusty-phillips/rescript-zora/src/Zora.bs.js";
import * as Zora$1 from "zora";
import * as Store from "../src/Store.bs.js";
import * as Belt_MapString from "rescript/lib/es6/belt_MapString.js";

Zora$1.test("Test recipes Store", (function (t) {
        t.test("Adds a recipe to empty state", (function (t) {
                var newState = Store.reducer(Store.initialState, {
                      TAG: /* AddRecipe */0,
                      id: "abc",
                      title: "Bread",
                      ingredients: "Flour, Water",
                      instructions: "Mix and Bake"
                    });
                t.equal(Belt_MapString.size(newState.recipes), 1, "Should be one recipe in the map");
                t.ok(Belt_MapString.has(newState.recipes, "abc"), "The one recipe should have id 'abc'");
                var recipe = Belt_MapString.getExn(newState.recipes, "abc");
                t.equal(recipe.title, "Bread", "The titles should match");
                t.equal(Belt_MapString.size(Store.initialState.tags), 0, "Should not add any tags");
                return Zora.done(undefined);
              }));
        t.test("setRecipe does not add two recipes", (function (t) {
                var action = {
                  TAG: /* SetRecipe */2,
                  _0: {
                    id: "abc",
                    title: "Bread",
                    ingredients: "Flour, Water",
                    instructions: "Mix and Bake",
                    tags: [],
                    updatedAt: 500.0,
                    deleted: false
                  }
                };
                var state = Store.reducer(Store.initialState, action);
                t.equal(Belt_MapString.size(state.recipes), 1, "Should be one recipe in the map");
                var state$1 = Store.reducer(state, action);
                t.equal(Belt_MapString.size(state$1.recipes), 1, "Should still be one recipe in the map");
                return Zora.done(undefined);
              }));
        t.test("AddTag action", (function (t) {
                t.test("noop when recipe does not exist", (function (t) {
                        var state = Store.reducer(Store.initialState, {
                              TAG: /* AddTag */1,
                              recipeId: "doesn't exist",
                              tag: "add me"
                            });
                        t.equal(Belt_MapString.size(state.recipes), 0, "Should not have added a recipe");
                        t.equal(Belt_MapString.size(state.tags), 0, "Should not have added a tag");
                        return Zora.done(undefined);
                      }));
                t.test("creates tag when it does not exist", (function (t) {
                        var state_recipes = Belt_MapString.set(undefined, "abc", {
                              id: "abc",
                              title: "Bread",
                              ingredients: "Flour, Water",
                              instructions: "Mix and Bake",
                              tags: [],
                              updatedAt: 500.0,
                              deleted: false
                            });
                        var state = {
                          recipes: state_recipes,
                          tags: undefined
                        };
                        var state$1 = Store.reducer(state, {
                              TAG: /* AddTag */1,
                              recipeId: "abc",
                              tag: "Carbs"
                            });
                        t.equal(Belt_MapString.size(state$1.recipes), 1, "Should still have one recipe");
                        t.equal(Belt_MapString.size(state$1.tags), 1, "Should have one tag");
                        var breadOption = Belt_MapString.get(state$1.recipes, "abc");
                        Zora.$$Option.some(t, breadOption, "Bread should be defined");
                        t.equal(breadOption.tags.length, 1, "Bread should have one tag");
                        t.equal(breadOption.tags[0], "Carbs", "Bread tag should be carbs");
                        var tagsOption = Belt_MapString.get(state$1.tags, "Carbs");
                        Zora.$$Option.some(t, tagsOption, "Carbs tag should exist");
                        t.equal(tagsOption.tag, "Carbs", "tag should have correct name");
                        t.equal(tagsOption.recipes.length, 1, "Tag should have one recipe");
                        return Zora.done(undefined);
                      }));
                return Zora.done(undefined);
              }));
        
      }));

export {
  
}
/*  Not a pure module */
